// Open the file with the AST types
%{
open CalculatorTypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF

// Precedence ans associativity
%left TIMES DIV PLUS MINUS
%right POW

// Initial non-terminal symbol
%start start

// Return type of each of then non-terminal symbols
%type <expr> start
%type <expr> expression

// Grammar productions
%%

// We expect and expression and then EOF
// We return whatever parsing the expression returns
start: expression EOF             { $1 }

expression:
  | NUM                           { Num($1) }
  | expression TIMES expression   { TimesExpr($1,$3) }
  | expression DIV expression     { DivExpr($1,$3) }
  | expression PLUS expression    { PlusExpr($1,$3) }
  | expression MINUS expression   { MinusExpr($1,$3) }
  | expression POW expression     { PowExpr($1,$3) }
  | LPAR expression RPAR          { $2 }

%%
